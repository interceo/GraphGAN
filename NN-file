#include <iostream>
#include <cmath>

using namespace std;

const int coat = 3;


int main() {
	int i, j, k, w = 0, n[coat] = { 2, 2, 1 }, l, l1 = 0, l2 = 0, l3 = 0, kl;

	double ka = 0;

	for (i = 0; i < coat; i++) {
		w = n[i] + w;
	}

	kl = w;

	double* outO = new double[n[coat - 1]];
	double* net = new double[w - n[0]];
	double* del = new double[w - n[0]];
	double* out = new double[w];

	for (i = 0; i < (w - n[0]); i++) {
		del[i] = 0;
	}

	for (i = 0; i < n[0]; i++) {
		out[i] = 0 + i;
	}

	w = 0;

	for (i = 0; i < (coat - 1); i++) {
		w = n[i] * n[i + 1] + w;
	}

	double* weight = new double[w];
	double* delw = new double[w];
	double* grad = new double[w];

	for (i = 0; i < w; i++) {
		weight[i] = 0.5;
		delw[i] = 0;
	}


	outO[0] = 0;

	for (k = 0; k < 100; k++) {
		for (i = 0; i < (w - n[0]); i++) {
			net[i] = 0;
		}
		l1 = 0;
		l2 = 0;
		l3 = 0;

		for (l = 0; l < (coat - 1); l++) {
			for (i = 0; i < n[l + 1]; i++) {
				for (j = 0; j < n[l]; j++) {
					net[l2 + i] = weight[l1 + i * n[l] + j] * out[l3 + j] + net[l2 + i];
				}
				out[l3 + n[l] + i] = 1 / (1 + exp(-net[l2 + i]));

			}
			l1 = l1 + n[l] * n[l + 1];
			l2 = n[l + 1] + l2;
			l3 = n[l] + l3;
		}
		l1 = 0;
		l2 = 0;

		for (i = 0; i < n[coat - 1]; i++) {
			del[i] = (outO[i] - out[l3 + i]) * out[l3 + i] * (1 - out[l3 + i]);
		}

		for (l = 0; l < coat - 1; l++) {
			l1 = n[coat - 1 - l] * n[coat - 2 - l] + l1;
			for (i = 0; i < n[coat - 2]; i++) {
				for (j = 0; j < n[coat - 1]; j++) {
					grad[l1 - n[coat - 1] * n[coat - 2] + i * n[coat - 1] + j] = del[l2 + j] * out[l3 - n[coat - 2] + i];
					delw[l1 - n[coat - 1] * n[coat - 2] + i * n[coat - 1] + j] = 0.5 * grad[l1 - n[coat - 1] * n[coat - 2] + i * n[coat - 1] + j] + 0.3 * delw[l1 - n[coat - 1] * n[coat - 2] + i * n[coat - 1] + j];
					weight[w - l1 + i * n[coat - 1] + j] = weight[w - l1 + i * n[coat - 1] + j] + delw[l1 - n[coat - 1] * n[coat - 2] + i * n[coat - 1] + j];
				}
			}

			for (i = 0; i < n[coat - 2 - l]; i++) {
				for (j = 0; j < n[coat - 1 - l]; j++) {
					ka = del[l2 + j] * weight[w - l1 + i * n[coat - 1] + j] + ka;
				}
				del[l2 + n[coat - 1] + i] = (1 - out[n[coat - 2] + i]) * out[l3 - n[coat - 2] + i] * ka;
			}
			l2 = l2 + n[coat - 1 - l];
			ka = 0;
		}
	}
}
